/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/type": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get soil type
         * @description Returns the most probable soil type for the given location
         */
        get: operations["get_soil_type_type_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/property": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get soil property
         * @description Returns the values of the soil properties for the given location and depths. Note: The ocs property is only available for the 0-30cm depth and vice versa. If the depth and property are incompatible, the response will not include the property.
         */
        get: operations["get_soil_property_property_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/type/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get soil type summary
         * @description Returns the a summary of the soil types present in the given bounding box, represented by a mapping of each soil type to the number of occurrences in the bounding box
         */
        get: operations["get_soil_type_summary_type_summary_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ready": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check if this service is ready to receive requests
         * @description Returns a message describing the status of this service
         */
        get: operations["ready_ready_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check if this service is alive
         * @description Returns a simple message to indicate that this service is alive
         */
        get: operations["liveness_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** BoundingBoxGeometry */
        BoundingBoxGeometry: {
            /**
             * Coordinates
             * @description [[[min_lon, min_lat], [max_lon, min_lat], [max_lon, max_lat], [min_lon, max_lat], [min_lon, min_lat]]]
             * @example [
             *       [
             *         [
             *           60.5,
             *           11.59
             *         ],
             *         [
             *           60.6,
             *           11.59
             *         ],
             *         [
             *           60.6,
             *           11.6
             *         ],
             *         [
             *           60.5,
             *           11.6
             *         ],
             *         [
             *           60.5,
             *           11.59
             *         ]
             *       ]
             *     ]
             */
            coordinates: number[][][];
            type: components["schemas"]["GeometryType"];
        };
        /** DepthRange */
        DepthRange: {
            /**
             * @description The top depth
             * @example 0
             */
            top_depth: components["schemas"]["SoilDepths"];
            /**
             * @description The bottom depth
             * @example 5
             */
            bottom_depth: components["schemas"]["SoilDepths"];
            /**
             * @description The unit of the depth range
             * @example cm
             */
            unit_depth: components["schemas"]["SoilDepthUnits"];
        };
        /**
         * FeatureType
         * @constant
         */
        FeatureType: "Feature";
        /**
         * GeometryType
         * @enum {string}
         */
        GeometryType: "Point" | "Polygon";
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** PointGeometry */
        PointGeometry: {
            /**
             * Coordinates
             * @description [longitude, latitude] decimal coordinates
             * @example [
             *       60.5,
             *       11.59
             *     ]
             */
            coordinates: number[];
            type: components["schemas"]["GeometryType"];
        };
        /**
         * SoilConversionFactors
         * @enum {integer}
         */
        SoilConversionFactors: 10 | 100;
        /** SoilDepth */
        SoilDepth: {
            /** @description The soil depth range */
            range: components["schemas"]["DepthRange"];
            /** @description The soil depth label */
            label: components["schemas"]["SoilDepthLabels"];
            /** @description The queried soil property values */
            values: components["schemas"]["SoilPropertyValues"];
        };
        /**
         * SoilDepthLabels
         * @enum {string}
         */
        SoilDepthLabels: "0-5cm" | "0-30cm" | "5-15cm" | "15-30cm" | "30-60cm" | "60-100cm" | "100-200cm";
        /**
         * SoilDepthUnits
         * @constant
         */
        SoilDepthUnits: "cm";
        /**
         * SoilDepths
         * @enum {integer}
         */
        SoilDepths: 0 | 5 | 15 | 30 | 60 | 100 | 200;
        /** SoilLayer */
        SoilLayer: {
            /**
             * @description The soil property code
             * @example bdod
             */
            code: components["schemas"]["SoilPropertiesCodes"];
            /**
             * Name
             * @description The name of the soil property
             * @example Bulk density
             */
            name: string;
            /** @description The unit of the soil property */
            unit_measure: components["schemas"]["SoilPropertyUnit"];
            /**
             * Depths
             * @description The queried soil depths with values
             */
            depths: components["schemas"]["SoilDepth"][];
        };
        /** SoilLayerList */
        SoilLayerList: {
            /**
             * Layers
             * @description The queried soil property layers
             */
            layers: components["schemas"]["SoilLayer"][];
        };
        /**
         * SoilMappedUnits
         * @enum {string}
         */
        SoilMappedUnits: "cg/cm³" | "mmol(c)/kg" | "cm³/dm³" | "g/kg" | "cg/kg" | "hg/m³" | "t/ha" | "pH*10" | "dg/kg";
        /**
         * SoilPropertiesCodes
         * @enum {string}
         */
        SoilPropertiesCodes: "bdod" | "cec" | "cfvo" | "clay" | "nitrogen" | "ocd" | "ocs" | "phh2o" | "sand" | "silt" | "soc";
        /** SoilPropertyJSON */
        SoilPropertyJSON: {
            /** @description The feature type of the geojson-object */
            type: components["schemas"]["FeatureType"];
            /** @description The geometry of the queried location */
            geometry: components["schemas"]["PointGeometry"];
            /** @description The queried soil property information */
            properties: components["schemas"]["SoilLayerList"];
        };
        /** SoilPropertyUnit */
        SoilPropertyUnit: {
            /**
             * @description The conversion factor
             * @example 10
             */
            conversion_factor: components["schemas"]["SoilConversionFactors"];
            /**
             * @description The mapped unit of the soil property
             * @example cm³/dm³
             */
            mapped_units: components["schemas"]["SoilMappedUnits"];
            /**
             * @description The target unit of the soil property
             * @example m³/ha
             */
            target_units: components["schemas"]["SoilTargetUnits"];
            /**
             * Uncertainty Unit
             * @description The unit of the uncertainty
             * @example
             */
            uncertainty_unit: string;
        };
        /**
         * SoilPropertyValueTypes
         * @enum {string}
         */
        SoilPropertyValueTypes: "mean" | "Q0.05" | "Q0.5" | "Q0.95" | "uncertainty";
        /** SoilPropertyValues */
        SoilPropertyValues: {
            /**
             * Mean
             * @description The mean value of the soil property
             * @example 50
             */
            mean?: number | null;
            /**
             * Q0.05
             * @description The 5th percentile of the soil property
             * @example 40
             */
            "Q0.05"?: number | null;
            /**
             * Q0.5
             * @description The 50th percentile of the soil property
             * @example 50
             */
            "Q0.5"?: number | null;
            /**
             * Q0.95
             * @description The 95th percentile of the soil property
             * @example 60
             */
            "Q0.95"?: number | null;
            /**
             * Uncertainty
             * @description The uncertainty of the soil property
             * @example 5
             */
            uncertainty?: number | null;
        };
        /**
         * SoilTargetUnits
         * @enum {string}
         */
        SoilTargetUnits: "kg/dm³" | "cmol(c)/kg" | "cm³/100cm³" | "%" | "g/kg" | "hg/m³" | "kg/m²" | "pH";
        /** SoilTypeInfo */
        SoilTypeInfo: {
            /**
             * @description The most probable soil type at the queried location
             * @example Acrisols
             */
            most_probable_soil_type: components["schemas"]["SoilTypes"];
            /**
             * Probabilities
             * @description The soil type probabilities
             */
            probabilities?: components["schemas"]["SoilTypeProbability"][] | null;
        };
        /** SoilTypeJSON */
        SoilTypeJSON: {
            /** @description The feature type of the geojson-object */
            type: components["schemas"]["FeatureType"];
            /** @description The geometry of the queried location */
            geometry: components["schemas"]["PointGeometry"];
            /** @description The soil type information at the queried location */
            properties: components["schemas"]["SoilTypeInfo"];
        };
        /** SoilTypeProbability */
        SoilTypeProbability: {
            /**
             * @description The soil type
             * @example Acrisols
             */
            soil_type: components["schemas"]["SoilTypes"];
            /**
             * Probability
             * @description The probability of the soil type as an integer between 0 and 100
             * @example 70
             */
            probability: number;
        };
        /** SoilTypeSummary */
        SoilTypeSummary: {
            /**
             * @description The soil type
             * @example Acrisols
             */
            soil_type: components["schemas"]["SoilTypes"];
            /**
             * Count
             * @description The number of occurrences of the soil type within the queried bounding box
             * @example 70
             */
            count: number;
        };
        /** SoilTypeSummaryInfo */
        SoilTypeSummaryInfo: {
            /**
             * Summaries
             * @description The soil type summaries within the queried bounding box
             */
            summaries: components["schemas"]["SoilTypeSummary"][];
        };
        /** SoilTypeSummaryJSON */
        SoilTypeSummaryJSON: {
            /** @description The feature type of this geojson-object */
            type: components["schemas"]["FeatureType"];
            /** @description The geometry of the queried location */
            geometry: components["schemas"]["BoundingBoxGeometry"];
            /** @description The soil type summary information */
            properties: components["schemas"]["SoilTypeSummaryInfo"];
        };
        /**
         * SoilTypes
         * @enum {string}
         */
        SoilTypes: "Acrisols" | "Albeluvisols" | "Alisols" | "Andosols" | "Arenosols" | "Calcisols" | "Cambisols" | "Chernozems" | "Cryosols" | "Durisols" | "Ferralsols" | "Fluvisols" | "Gleysols" | "Gypsisols" | "Histosols" | "Kastanozems" | "Leptosols" | "Lixisols" | "Luvisols" | "Nitisols" | "Phaeozems" | "Planosols" | "Plinthosols" | "Podzols" | "Regosols" | "Solonchaks" | "Solonetz" | "Stagnosols" | "Umbrisols" | "Vertisols" | "No information";
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_soil_type_type_get: {
        parameters: {
            query: {
                /**
                 * @description Longitude
                 * @example 9.58
                 */
                lon: number;
                /**
                 * @description Latitude
                 * @example 60.1
                 */
                lat: number;
                /**
                 * @description Number of most probable soil types that will be returned, sorted by probability in descending order
                 * @example 0
                 */
                top_k?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SoilTypeJSON"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_soil_property_property_get: {
        parameters: {
            query: {
                /**
                 * @description Longitude
                 * @example 9.58
                 */
                lon: number;
                /**
                 * @description Latitude
                 * @example 60.1
                 */
                lat: number;
                /** @description List of depths to include in the query. */
                depths: components["schemas"]["SoilDepthLabels"][];
                /** @description List of soil properties to include in the query. */
                properties: components["schemas"]["SoilPropertiesCodes"][];
                /** @description List of values to include in the query. */
                values: components["schemas"]["SoilPropertyValueTypes"][];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SoilPropertyJSON"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_soil_type_summary_type_summary_get: {
        parameters: {
            query: {
                /**
                 * @description Minimum longitude
                 * @example 9.58
                 */
                min_lon: number;
                /**
                 * @description Maximum longitude
                 * @example 9.6
                 */
                max_lon: number;
                /**
                 * @description Minimum latitude
                 * @example 60.1
                 */
                min_lat: number;
                /**
                 * @description Maximum latitude
                 * @example 60.12
                 */
                max_lat: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SoilTypeSummaryJSON"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    ready_ready_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    liveness_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string | undefined;
                    };
                };
            };
        };
    };
}
